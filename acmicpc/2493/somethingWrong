package main

import (
    "bufio"
    "os"
    // "strconv"
    "fmt"
)

var wt *bufio.Writer = bufio.NewWriter(os.Stdout)
var sc *bufio.Scanner = bufio.NewScanner(os.Stdin)
func nextInt() (r int) {
    sc.Scan()
    for _, c := range sc.Bytes() {
        r *= 10
        r += int(c-'0')
    }
    return
}

type Node struct {
    Value, Idx int
    Next *Node
}

type Stack struct {
    Top *Node
    Size int
}

func (stack *Stack) Push(node Node) {
    if (*stack).Top != nil {
        top := (*stack).Top
        node.Next = top
    }
    (*stack).Top = &node
    (*stack).Size++
}

func (stack *Stack) Pop() {
    if (*stack).Size > 0 {
        (*stack).Top = (*stack).Top.Next
    }
    stack.Size--
}

func (stack Stack) Peek() (node Node) {
    if stack.Size > 0 {
        node = *stack.Top
    }
    return
}

func main() {
    sc.Split(bufio.ScanWords)
    defer wt.Flush()

    N := nextInt()
    stack := Stack{}
    stack.Push(Node{Value:nextInt(), Idx:0})
    result := make([]int, N, N)
    result[0] = 0
    for i := 1; i < N; i++ {
        n := nextInt()
        for stack.Size > 0 {
            if t := stack.Peek(); t.Value > n {
                result = append(result, t.Idx)
            }
            stack.Pop()
        }
        stack.Push(Node{Value:n, Idx:i})
    }
    fmt.Println(result)
}
